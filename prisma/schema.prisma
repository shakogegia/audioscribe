// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Book {
  id        String   @id @default(cuid())
  setup     Boolean  @default(false)
  model     String?
  favorite  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  transcriptSegment TranscriptSegment[]
  bookSetupProgress BookSetupProgress[]
  jobs              Job[]
}

model TranscriptSegment {
  id        Int      @id @default(autoincrement())
  bookId    String
  fileIno   String
  model     String
  text      String
  startTime Int
  endTime   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  book Book @relation(fields: [bookId], references: [id])

  @@index([bookId])
}

model Job {
  id          String    @id @default(cuid())
  bookId      String
  type        String
  data        String
  status      String    @default("pending")
  result      String?
  error       String?
  attempts    Int       @default(0)
  maxAttempts Int       @default(3)
  delay       Int       @default(0)
  priority    Int       @default(0)
  processAt   DateTime  @default(now())
  completedAt DateTime?
  failedAt    DateTime?
  pid         Int? // Process ID for cancellation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // relations
  book Book? @relation(fields: [bookId], references: [id])

  @@index([status, processAt, priority])
}

model BookSetupProgress {
  id       String  @id @default(cuid())
  bookId   String
  stage    String // "download", "transcribe", "vectorize"
  status   String  @default("pending") // pending, running, completed, failed
  progress Float   @default(0)
  model    String?
  error    String?

  startedAt   DateTime?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  book Book @relation(fields: [bookId], references: [id])

  @@unique([bookId, stage])
  @@index([bookId])
}
